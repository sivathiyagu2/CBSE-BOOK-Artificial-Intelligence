Unit 1 INTRODUCTION TO AI

Project 1: Creating a Basic Chatbot

A chatbot is an AI application designed to simulate conversation with human users. This project will guide you through creating a basic rule-based chatbot using Python.
Step-by-Step Guide:
Set Up the Environment:
Install Python and a text editor or IDE (e.g., Visual Studio Code).


pip install nltk
import nltk
from nltk.chat.util import Chat, reflections

pairs = [
    [
        r"my name is (.*)",
        ["Hello %1, How can I help you today?",]
    ],
    [
        r"hi|hello|hey",
        ["Hello!", "Hey there!",]
    ],
    [
        r"what is your name?",
        ["I am a chatbot created to assist you.",]
    ],
    [
        r"how are you?",
        ["I'm doing good. How about you?",]
    ],
    [
        r"sorry (.*)",
        ["It's okay.", "No problem at all.",]
    ],
    [
        r"quit",
        ["Bye! Take care.",]
    ],
]


def chatbot():
    print("Hi! I am your chatbot. Type 'quit' to exit.")
    chat = Chat(pairs, reflections)
    chat.converse()

if __name__ == "__main__":
    chatbot()

python chatbot.py


Project 2: Image Recognition Using Pretrained Models
Image recognition involves identifying objects or features within an image. This project uses a pretrained model to classify images.

Step-by-Step Guide:

pip install tensorflow keras numpy matplotlib

Import Libraries:

import tensorflow as tf
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications.resnet50 import ResNet50, preprocess_input, decode_predictions
import numpy as np
import matplotlib.pyplot as plt

Load the Pretrained Model:
model = ResNet50(weights='imagenet')

Load and Preprocess the Image:
img_path = 'path_to_your_image.jpg'  # Replace with the path to your image
img = image.load_img(img_path, target_size=(224, 224))
img_array = image.img_to_array(img)
img_array = np.expand_dims(img_array, axis=0)
img_array = preprocess_input(img_array)

Make Predictions:
predictions = model.predict(img_array)
decoded_predictions = decode_predictions(predictions, top=3)[0]

for i, (imagenet_id, label, score) in enumerate(decoded_predictions):
    print(f"{i+1}: {label} ({score:.2f})")

Display the Image and Predictions:

plt.imshow(img)
plt.axis('off')
plt.title("Predictions:")
for i, (imagenet_id, label, score) in enumerate(decoded_predictions):
    plt.text(0, 250 + i*20, f"{i+1}: {label} ({score:.2f})", color='red')
plt.show()

Run the Script:
python image_recognition.py


Exercise 1: Data Cleaning
Objective: Learn how to clean and preprocess a dataset using Python and pandas.

pip install pandas numpy

Import Libraries:
import pandas as pd
import numpy as np

Load the Dataset:
df = pd.read_csv('path_to_your_dataset.csv')  # Replace with the path to your dataset

Inspect the Dataset:
print(df.head())
print(df.info())

Handle Missing Values

Identify Missing Values:
print(df.isnull().sum())

Fill Missing Values:
df.fillna(df.mean(), inplace=True)

Drop Rows with Missing Values:
df.dropna(inplace=True)

Normalize Data:
from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
df_scaled = scaler.fit_transform(df)
df_scaled = pd.DataFrame(df_scaled, columns=df.columns)

Save the Cleaned Dataset:
df_scaled.to_csv('cleaned_dataset.csv', index=False)

Exercise 2: Data Visualization
Objective: Learn how to visualize data to gain insights using Python and matplotlib.

pip install pandas matplotlib seaborn

Import Libraries:
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

Load the Dataset:
df = pd.read_csv('cleaned_dataset.csv')

Plot Histograms:
df.hist(figsize=(10, 8))
plt.show()

Create a Correlation Matrix:
corr_matrix = df.corr()
plt.figure(figsize=(12, 10))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm')
plt.show()

Plot Scatter Plots:
sns.pairplot(df)
plt.show()


Building a Simple Recommender System
A recommender system suggests items to users based on their preferences and behavior.

pip install numpy pandas scikit-learn

Import Libraries:
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.metrics import mean_squared_error

Load the Dataset:
df = pd.read_csv('path_to_movielens_dataset.csv')

Preprocess the Data:
# Pivot the data to create a user-item matrix
user_movie_matrix = df.pivot(index='userId', columns='movieId', values='rating')
# Fill NaN values with 0
user_movie_matrix.fillna(0, inplace=True)

Compute Similarity Matrix:
similarity_matrix = cosine_similarity(user_movie_matrix)

Build the Recommender System:
def recommend_movies(user_id, num_recommendations):
    user_index = user_id - 1
    similar_users = similarity_matrix[user_index]
    # Get the top similar users
    similar_users_index = similar_users.argsort()[::-1][1:num_recommendations+1]
    # Get the movies these users liked
    recommended_movies = user_movie_matrix.iloc[similar_users_index].mean(axis=0).sort_values(ascending=False)
    return recommended_movies.head(num_recommendations)

# Recommend movies for user with ID 1
recommendations = recommend_movies(1, 5)
print(recommendations)

Creating a Basic Image Classifier
An image classifier identifies the category of an object in an image.

